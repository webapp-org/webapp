name: Packer Build

on:
  push:
    branches:
      - main
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Packer Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          touch .env

      # Command to create zip file of project
      - name: Create Zip Artifact
        run: zip -r webapp.zip .

      # Command to init packer
      - name: Init Packer
        run: packer init packer/packer-gcp.pkr.hcl

      # Commands to authenticate setup GCP
      - name: Authenticate GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: GCP SDK Setup
        uses: google-github-actions/setup-gcloud@v2

      - name: Gcloud CLI
        run: gcloud info

      - name: Log Secrets from Google Secret Manager
        run: |
          echo "PROJECT_ID=$(gcloud secrets versions access latest --secret="PROJECT_ID" --format="value(payload.data)")"
          echo "PROJECT_REGION=$(gcloud secrets versions access latest --secret="PROJECT_REGION" --format="value(payload.data)")"

          # echo "CLOUD_SQL_DATABASE_NAME=$(gcloud secrets versions access latest --secret="CLOUD_SQL_DATABASE_NAME" --format="value(payload.data)")"
          # echo "CLOUD_SQL_DATABASE_USER_NAME=$(gcloud secrets versions access latest --secret="CLOUD_SQL_DATABASE_USER_NAME" --format="value(payload.data)")"
          # echo "CLOUD_SQL_DATABASE_PORT=$(gcloud secrets versions access latest --secret="CLOUD_SQL_DATABASE_PORT" --format="value(payload.data)")"
          # echo "DB_PASSWORD=$(gcloud secrets versions access latest --secret="DB_PASSWORD" --format="value(payload.data)")"
          # echo "CLOUD_SQL_INSTANCE_PRIVATE_IP=$(gcloud secrets versions access latest --secret="CLOUD_SQL_INSTANCE_PRIVATE_IP" --format="value(payload.data)")"
          # echo "DOMAIN_NAME=$(gcloud secrets versions access latest --secret="DOMAIN_NAME" --format="value(payload.data)")"
          # echo "PUBSUB_TOPIC_NAME=$(gcloud secrets versions access latest --secret="PUBSUB_TOPIC_NAME" --format="value(payload.data)")"
          # echo "VM_KMS_KEY=$(gcloud secrets versions access latest --secret="VM_KMS_KEY" --format="value(payload.data)")"

      - name: Fetch Secrets from Google  Secret Manager
        run: |
          echo "PROJECT_ID=$(gcloud secrets versions access latest --secret="PROJECT_ID" --format="value(payload.data)")"
          echo "PROJECT_REGION=$(gcloud secrets versions access latest --secret="PROJECT_REGION" --format="value(payload.data)")"
          echo "CLOUD_SQL_DATABASE_NAME=$(gcloud secrets versions access latest --secret="CLOUD_SQL_DATABASE_NAME" --format="value(payload.data)")" >> $GITHUB_ENV
          echo "CLOUD_SQL_DATABASE_USER_NAME=$(gcloud secrets versions access latest --secret="CLOUD_SQL_DATABASE_USER_NAME" --format="value(payload.data)")" >> $GITHUB_ENV
          echo "CLOUD_SQL_DATABASE_PORT=$(gcloud secrets versions access latest --secret="CLOUD_SQL_DATABASE_PORT" --format="value(payload.data)")" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(gcloud secrets versions access latest --secret="DB_PASSWORD" --format="value(payload.data)")" >> $GITHUB_ENV
          echo "CLOUD_SQL_INSTANCE_PRIVATE_IP=$(gcloud secrets versions access latest --secret="CLOUD_SQL_INSTANCE_PRIVATE_IP" --format="value(payload.data)")" >> $GITHUB_ENV
          echo "DOMAIN_NAME=$(gcloud secrets versions access latest --secret="DOMAIN_NAME" --format="value(payload.data)")" >> $GITHUB_ENV
          echo "PUBSUB_TOPIC_NAME=$(gcloud secrets versions access latest --secret="PUBSUB_TOPIC_NAME" --format="value(payload.data)")" >> $GITHUB_ENV
          echo "VM_KMS_KEY=$(gcloud secrets versions access latest --secret="VM_KMS_KEY" --format="value(payload.data)")" >> $GITHUB_ENV

      # - name: Build Packer
      #   id: packer_build
      #   run: |
      #     PACKER_OUTPUT=$(packer build -var-file="packer/variables.pkrvars.hcl" packer/packer-gcp.pkr.hcl)
      #     echo "$PACKER_OUTPUT"
      #     IMAGE_ID=$(echo "$PACKER_OUTPUT" | grep 'A disk image was created' | grep -o "packer-[0-9]*")
      #     echo "IMAGE_ID=$IMAGE_ID"
      #     echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
      - name: Build Packer
        id: packer_build
        run: |
          echo "IMAGE_ID=packer-1712723143"
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      - name: Create Instance Template with New Image
        id: create_template
        run: |
          TEMPLATE_NAME="webapp-template-${{ github.run_id }}"
          echo "Creating instance template with the image ID: $IMAGE_ID"
          TEMPLATE_PATH=$(gcloud compute instance-templates create $TEMPLATE_NAME \
            --machine-type=e2-medium \
            --image-project=$PROJECT_ID \
            --image=$IMAGE_ID \
            --boot-disk-type=pd-balanced \
            --boot-disk-size=50 \
            --boot-disk-kms-key=${{ env.VM_KMS_KEY}} \
            --instance-template-region=${{ secrets.REGION }} \
            --region=${{ secrets.REGION }} \
            --subnet=webapp \
            --tags=deny-all,allow-8080 \
            --service-account=vm-service-account@csye6225-dev-415023.iam.gserviceaccount.com \
            --scopes=cloud-platform \
            --metadata=startup-script=$'
            #!/bin/bash
            # Check if the script has already run
            if [ -f "/opt/.env_configured" ]; then
            exit 0
            fi
            # Populate the .env file
            echo "DATABASE=${{ env.CLOUD_SQL_DATABASE_NAME }}" > /opt/webapp/.env
            echo "USERNAME=${{ env.CLOUD_SQL_DATABASE_USER_NAME }}" >> /opt/webapp/.env
            echo "PASSWORD=${{ env.DB_PASSWORD }}\" >> /opt/webapp/.env
            echo "HOST=${{ env.CLOUD_SQL_INSTANCE_PRIVATE_IP }}\" >> /opt/webapp/.env
            echo "PORT=${{ env.CLOUD_SQL_DATABASE_PORT }}" >> /opt/webapp/.env
            echo "DOMAIN_NAME=${{ env.DOMAIN_NAME }}" >> /opt/webapp/.env
            echo "ENV=prod" >> /opt/webapp/.env
            echo "PUBSUB_TOPIC_NAME=${{ env.PUBSUB_TOPIC_NAME }}" >> /opt/webapp/.env
            # Mark script as run by creating a file
            touch /opt/.env_configured' --format="value(selfLink)")
          echo "TEMPLATE_PATH=$TEMPLATE_PATH" >> $GITHUB_ENV
          echo "Instance template created with path: $TEMPLATE_PATH"

      # - name: Update Managed Instance Group with New Template
      #   run: |
      #     TEMPLATE_PATH=${{ env.TEMPLATE_PATH }}
      #     echo "Updating MIG with instance template: $TEMPLATE_PATH"
      #     gcloud compute instance-groups managed rolling-action start-update webapp-region-mig \
      #       --version template=$TEMPLATE_PATH \
      #       --region ${{ secrets.REGION }}

      # - name: Wait for managed instance group refresh to complete
      #   run: |
      #     gcloud compute instance-groups managed wait-until webapp-region-mig \
      #       --version-target-reached \
      #       --region ${{ secrets.REGION }}
