name: Packer Build

on:
  push:
    branches:
      - main
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Packer Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          touch .env

      # Command to create zip file of project
      - name: Create Zip Artifact
        run: zip -r webapp.zip .

      # Command to init packer
      - name: Init Packer
        run: packer init packer/packer-gcp.pkr.hcl

      # Commands to authenticate setup GCP
      - name: Authenticate GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: GCP SDK Setup
        uses: google-github-actions/setup-gcloud@v2

      - name: Gcloud CLI
        run: gcloud info

      # - name: Build Packer
      #   id: packer_build
      #   run: |
      #     PACKER_OUTPUT=$(packer build -var-file="packer/variables.pkrvars.hcl" packer/packer-gcp.pkr.hcl)
      #     echo "$PACKER_OUTPUT"
      #     IMAGE_ID=$(echo "$PACKER_OUTPUT" | grep 'A disk image was created' | grep -o "packer-[0-9]*")
      #     echo "IMAGE_ID=$IMAGE_ID"
      #     echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      # - name: Create Instance Template with New Image
      #   run: |
      #     TEMPLATE_NAME="webapp-template-${{ github.run_id }}"
      #     echo "Creating instance template with the image ID: $IMAGE_ID"
      #     gcloud compute instance-templates create $TEMPLATE_NAME \
      #       --machine-type=e2-medium \
      #       --image-project=${{ secrets.GCP_PROJECT_ID }} \
      #       --image=$IMAGE_ID \
      #       --region=${{ secrets.REGION }} \
      #       --subnet=webapp \
      #       --tags=http-server,https-server \
      #       --service-account=${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
      #       --scopes=cloud-platform \
      #       --metadata=startup-script='#!/bin/bash\n# Check if the script has already run\nif [ -f "/opt/.env_configured" ]; then\n  exit 0\nfi\n# Populate the .env file\necho "DATABASE=${{ secrets.CLOUD_SQL_DATABASE_NAME }}" > /opt/webapp/.env\necho "USERNAME=${{ secrets.CLOUD_SQL_DATABASE_USER_NAME }}" >> /opt/webapp/.env\necho "PASSWORD=${{ secrets.CLOUD_SQL_DB_PASSWORD }}" >> /opt/webapp/.env\necho "HOST=${{ secrets.CLOUD_SQL_INSTANCE_PRIVATE_IP_ADDRESS }}" >> /opt/webapp/.env\necho "PORT=${{ secrets.CLOUD_SQL_DATABASE_PORT }}" >> /opt/webapp/.env\necho "DOMAIN_NAME=${{ secrets.PROD_DOMAIN_NAME }}" >> /opt/webapp/.env\necho "ENV=prod" >> /opt/webapp/.env\necho "PUBSUB_TOPIC_NAME=${{ secrets.PUBSUB_TOPIC_NAME }}" >> /opt/webapp/.env\n# Mark script as run by creating a file\ntouch /opt/.env_configured'; \

      #     echo "Instance template created with name: $TEMPLATE_NAME"
      #     echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_ENV

      - name: Create Instance Template with New Image
        run: |
          TEMPLATE_NAME="webapp-template-${{ github.run_id }}"
          echo "Creating instance template with the image ID: "
          gcloud compute instance-templates create test-new-1 \
            --machine-type=e2-medium \
            --image-project=${{ secrets.GCP_PROJECT_ID }} \
            --image=packer-1712583464 \
            --region=${{ secrets.REGION }} \
            --subnet=webapp \
            --tags=http-server,https-server \
            --service-account=${{ secrets.SERVICE_ACCOUNT_EMAIL }} \
            --scopes=cloud-platform \ 
            --metadata=startup-script="#!/bin/bash\n# Check if the script has already run\nif [ -f /opt/.env_configured ]; then\n  exit 0\nfi\n# Populate the .env file\necho DATABASE=${{ secrets.CLOUD_SQL_DATABASE_NAME }} > /opt/webapp/.env\necho USERNAME=${{ secrets.CLOUD_SQL_DATABASE_USER_NAME }} >> /opt/webapp/.env\necho PASSWORD=${{ secrets.CLOUD_SQL_DB_PASSWORD }} >> /opt/webapp/.env\necho HOST=${{ secrets.CLOUD_SQL_INSTANCE_PRIVATE_IP_ADDRESS }} >> /opt/webapp/.env\necho PORT=${{ secrets.CLOUD_SQL_DATABASE_PORT }} >> /opt/webapp/.env\necho DOMAIN_NAME=${{ secrets.PROD_DOMAIN_NAME }} >> /opt/webapp/.env\necho ENV=prod >> /opt/webapp/.env\necho PUBSUB_TOPIC_NAME=${{ secrets.PUBSUB_TOPIC_NAME }} >> /opt/webapp/.env\n# Mark script as run by creating a file\ntouch /opt/.env_configured"
          echo "Instance template created with name: $TEMPLATE_NAME"
          echo "TEMPLATE_NAME=$TEMPLATE_NAME" >> $GITHUB_ENV
