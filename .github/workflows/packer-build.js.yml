name: Packer Build

on:
  push:
    branches:
      - main
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Packer Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          touch .env

      # Command to create zip file of project
      - name: Create Zip Artifact
        run: zip -r webapp.zip .

      # Command to init packer
      - name: Init Packer
        run: packer init packer/packer-gcp.pkr.hcl

      # Commands to authenticate setup GCP
      - name: Authenticate GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: GCP SDK Setup
        uses: google-github-actions/setup-gcloud@v2

      - name: Gcloud CLI
        run: gcloud info

      # - name: Access DB_PASSWORD Secret
      #   uses: google-github-actions/get-secretmanager-secrets@v0.5.0 # Use the latest version available
      #   with:
      #     secrets: |
      #       DB_PASSWORD:db-password
      #       echo "DB_PASSWORD=$DB_PASSWORD"

      # - id: "secrets"
      #   name: "Fetch Secrets from Secret Manager"
      #   uses: "google-github-actions/get-secretmanager-secrets@v2"
      #   with:
      #     secrets: |-
      #       PASSWORD:${{ secrets.GCP_PROJECT_ID }}/DB_PASSWORD
      #       HOST:${{ secrets.GCP_PROJECT_ID }}/CLOUD_SQL_INSTANCE_PRIVATE_IP

      # - id: 'secrets'
      #   name: 'Fetch Secrets from Secret Manager'
      #   uses: 'google-github-actions/get-secretmanager-secrets@v2'
      #   with:
      #     secrets: |-
      #       DATABASE:my-project/CLOUD_SQL_DATABASE_NAME
      #       USERNAME:my-project/CLOUD_SQL_DATABASE_USER_NAME
      #       PASSWORD:my-project/DB_PASSWORD
      #       HOST:my-project/CLOUD_SQL_INSTANCE_PRIVATE_IP
      #       PORT:my-project/CLOUD_SQL_DATABASE_PORT
      #       DOMAIN_NAME:my-project/PROD_DOMAIN_NAME
      #       ENV:my-project/ENV
      #       PUBSUB_TOPIC_NAME:my-project/PUBSUB_TOPIC_NAME

      - name: Fetch Secrets from Google Secret Manager
        run: |
          echo "DB_PASSWORD=$(gcloud secrets versions access latest --secret='DB_PASSWORD' --format='value(payload.data)' --project='${{ secrets.GCP_PROJECT_ID }}' | base64 --decode)" >> $GITHUB_ENV
          echo "CLOUD_SQL_INSTANCE_PRIVATE_IP=$(gcloud secrets versions access latest --secret='CLOUD_SQL_INSTANCE_PRIVATE_IP' --format='value(payload.data)' --project='${{ secrets.GCP_PROJECT_ID }}' | base64 --decode)" >> $GITHUB_ENV

      # - name: Build Packer
      #   id: packer_build
      #   run: |
      #     PACKER_OUTPUT=$(packer build -var-file="packer/variables.pkrvars.hcl" packer/packer-gcp.pkr.hcl)
      #     echo "$PACKER_OUTPUT"
      #     IMAGE_ID=$(echo "$PACKER_OUTPUT" | grep 'A disk image was created' | grep -o "packer-[0-9]*")
      #     echo "IMAGE_ID=$IMAGE_ID"
      #     echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

      # --image=packer-1712628335 \
      # --image=$IMAGE_ID  \

      # --service-account=${{ secrets.SERVICE_ACCOUNT_EMAIL }}  \

      # - name: Create Instance Template with New Image
      #   id: create_template
      #   run: |
      #     TEMPLATE_NAME="webapp-template-${{ github.run_id }}"
      #     echo "Creating instance template with the image ID: $IMAGE_ID"
      #     TEMPLATE_PATH=$(gcloud compute instance-templates create $TEMPLATE_NAME \
      #       --machine-type=e2-medium \
      #       --image-project=${{ secrets.GCP_PROJECT_ID }} \
      #       --image=packer-1712628335 \
      #       --boot-disk-type=pd-balanced \
      #       --boot-disk-size=50 \
      #       --instance-template-region=${{ secrets.REGION }} \
      #       --region=${{ secrets.REGION }} \
      #       --subnet=webapp \
      #       --tags=deny-all,allow-8080 \
      #       --service-account=vm-service-account@csye6225-dev-415023.iam.gserviceaccount.com \
      #       --scopes=cloud-platform \
      #       --metadata=startup-script=$'
      #       #!/bin/bash\n
      #       # Check if the script has already run\n
      #       if [ -f "/opt/.env_configured" ]; then\n
      #       exit 0\n
      #       fi\n
      #       # Populate the .env file\n
      #       echo "DATABASE=${{ secrets.CLOUD_SQL_DATABASE_NAME }}" > /opt/webapp/.env\n
      #       echo "USERNAME=${{ secrets.CLOUD_SQL_DATABASE_USER_NAME }}" >> /opt/webapp/.env\n
      #       echo "PASSWORD=${{ secrets.CLOUD_SQL_DB_PASSWORD }}" >> /opt/webapp/.env\n
      #       echo "HOST=${{ secrets.CLOUD_SQL_INSTANCE_PRIVATE_IP_ADDRESS }}" >> /opt/webapp/.env\n
      #       echo "PORT=${{ secrets.CLOUD_SQL_DATABASE_PORT }}" >> /opt/webapp/.env\n
      #       echo "DOMAIN_NAME=${{ secrets.PROD_DOMAIN_NAME }}" >> /opt/webapp/.env\n
      #       echo "ENV=prod" >> /opt/webapp/.env\n
      #       echo "PUBSUB_TOPIC_NAME=${{ secrets.PUBSUB_TOPIC_NAME }}" >> /opt/webapp/.env\n
      #       # Mark script as run by creating a file\ntouch /opt/.env_configured' --format="value(selfLink)")
      #     echo "TEMPLATE_PATH=$TEMPLATE_PATH" >> $GITHUB_ENV
      #     echo "Instance template created with path: $TEMPLATE_PATH"

      # - name: Update Managed Instance Group with New Template
      #   run: |
      #     TEMPLATE_PATH=${{ env.TEMPLATE_PATH }}
      #     echo "Updating MIG with instance template: $TEMPLATE_PATH"
      #     gcloud compute instance-groups managed rolling-action start-update webapp-region-mig \
      #       --version template=$TEMPLATE_PATH \
      #       --region ${{ secrets.REGION }}

      # - name: Wait for managed instance group refresh to complete
      #   run: |
      #     gcloud compute instance-groups managed wait-until webapp-region-mig \
      #       --version-target-reached \
      #       --region ${{ secrets.REGION }}

      # - name: Get secrets from Secret Manager
      #   id: get_secrets
      #   uses: google-github-actions/get-secretmanager-secrets@v0
      #   with:
      #     secrets: |
      #       CLOUD_SQL_INSTANCE_PRIVATE_IP:db-private-ip
      #       DB_PASSWORD:db-password

      # # Debugging step to echo the secrets - Use with caution!
      # - name: Echo Secrets for Debugging
      #   run: |
      #     echo "Database Private IP: ${{ steps.get_secrets.outputs.db-private-ip }}"
      #     echo "Database Password: ${{ steps.get_secrets.outputs.db-password }}"
